# the pipeline path: https://dev.azure.com/pernod-ricard-data/PR.Data.DataArchitecture/_git/spartacus?path=/.azure-pipelines/cd.yml

# understand Azure pipeline shared template: https://doc-cicd-guidelines.azurewebsites.net/cicd_pipeline/shared_pipeline_templates/

name: $(TeamProject)+$(Build.DefinitionName)+$(SourceBranchName)+$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - "main"

pr: none

parameters:
  - name: env
    displayName: Databricks env
    type: string
    default: dev
    values:
      - dev
      - qat # if you have Databricks QAT environment
      - staging
      - prod
  - name: version
    displayName: Git tag
    type: string
    default: ""
  - name: message
    displayName: Deploy message (optional)
    type: string
    default: " "

resources:
  repositories:
    - repository: PR.Data.ProjectTemplates.CICD
      type: git
      name: PR.Data.ProjectTemplates/PR.Data.ProjectTemplates.CICD
    - repository: PR.Data.DataArchitecture.CICD
      type: git
      name: PR.Data.DataArchitecture/PR.Data.DataArchitecture.CICD

variables:
  - template: vars/repository_vars.yml
  - name: targetEnvInParam
    value: "${{ parameters.env }}"

stages:
  - stage: cd
    pool:
      vmImage: $(vmImage)
    jobs:
      - job: branching_policy
        # https://doc-cicd-guidelines.azurewebsites.net/cicd_pipeline/branching_policy/
        steps:
          - template: .azure-pipelines/templates/git/read_branching_policy.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              parameters: ${{ parameters }}
              cancelJobOnPush: true

      - job: versioning
        # https://doc-cicd-guidelines.azurewebsites.net/cicd_pipeline/versionning/
        dependsOn: branching_policy
        condition: eq(dependencies.branching_policy.outputs['set_dynamic_vars.versioning'], 'true')
        steps:
          - template: .azure-pipelines/templates/git/read_branching_policy.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              parameters: ${{ parameters }}
              showNewVars: false

          - template: .azure-pipelines/templates/package/write_new_version_on_merge.yml@PR.Data.ProjectTemplates.CICD

          - template: .azure-pipelines/templates/pip/pip_install.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              requirementsFilePathList:
                - requirements/requirements.txt
                - requirements/requirements-release.txt

          - template: .azure-pipelines/templates/package/build_and_publish_to_artifact.yml@PR.Data.ProjectTemplates.CICD

          - template: .azure-pipelines/templates/git/create_and_push_git_tag.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              tagName: $(newVersion)

      - job: cd_doc
        # https://doc-cicd-guidelines.azurewebsites.net/mkdocs/mkdocs/
        dependsOn: branching_policy
        condition: ne(dependencies.branching_policy.outputs['set_dynamic_vars.docName'], 'null')
        steps:
          - template: .azure-pipelines/templates/git/read_branching_policy.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              parameters: ${{ parameters }}
              showNewVars: false

          - template: .azure-pipelines/templates/common/list_vars.yml@PR.Data.ProjectTemplates.CICD

          - template: .azure-pipelines/templates/package/ensure_version.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              tagName: ${{ parameters.version }}
              needVersioning: $(versioning)

          - template: .azure-pipelines/templates/pip/pip_install.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              useCache: true
              requirementsFilePathList:
                - requirements/requirements.txt
                - requirements/requirements-docs.txt

          - template: .azure-pipelines/templates/mkdocs/mkdocs_build_and_publish_to_web_app.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              azureSubscription: $(serviceConnection)
              docName: $(docName)
              mkdocsPath: $(mkdocsPath)

      - job: cd_databricks
        # https://doc-cicd-guidelines.azurewebsites.net/databricks/onboarding_databricks_project_based_on_spartacus/
        # This job will deploy the jobs defined in the demo/ folder by using the configuration from the conf/ folder.
        dependsOn: branching_policy
        condition: ne(dependencies.branching_policy.outputs['set_dynamic_vars.targetEnv'], 'null')
        steps:
          - template: .azure-pipelines/templates/git/read_branching_policy.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              parameters: ${{ parameters }}
              showNewVars: false

          - template: .azure-pipelines/templates/keyvault/trigger_task_azure_key_vault.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              serviceConnection: $(serviceConnection)
              KeyVaultName: $(keyVaultName)

          - template: .azure-pipelines/templates/common/list_vars.yml@PR.Data.ProjectTemplates.CICD

          - template: .azure-pipelines/templates/package/ensure_version.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              tagName: ${{ parameters.version }}
              needVersioning: $(versioning)

          - template: .azure-pipelines/templates/pip/pip_install.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              requirementsFilePathList:
                - requirements/requirements-databricks.txt

          - template: .azure-pipelines/templates/databricks/create_dbx_config.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              databricksEnvName: $(databricksEnvName)
              databricksUrl: $(databricksUrl)
              clientId: $(sp-cicd-id)
              clientSecret: $(sp-cicd-secret)

          - script: |
              python conf/deployment.py --env $(databricksEnvName)
            displayName: generate deployement.json
            failOnStderr: true

          - template: .azure-pipelines/templates/databricks/update_dbx_deployment_json.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              devServicePrincipalId: $(sp-cicd-id)
              qatServicePrincipalId: $(sp-cicd-id) # if you have Databricks QAT environment
              stagingServicePrincipalId: $(sp-cicd-id)
              prodServicePrincipalId: $(sp-cicd-id)
              appGroupName: $(databricksGroupName)
              databricksEnvName: $(databricksEnvName)

          - template: .azure-pipelines/templates/databricks/deploy_dbx_jobs.yml@PR.Data.ProjectTemplates.CICD
            parameters:
              databricksEnvName: $(databricksEnvName)
